name: Pre-bottle-build steps
description: Runs the common steps to be done before building bottles.
inputs:
  bottles-directory:
    description: Bottles directory
    required: true
  cleanup:
    description: Do cleanup steps?
    required: false
    default: true
  download-bottles:
    description: Download bottles built in earlier job?
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Set up Homebrew
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@main
      with:
        core: true
        cask: true
        test-bot: true
      env:
        HOMEBREW_NO_UPDATE_REPORT_NEW: 1

    - run: brew test-bot --only-cleanup-before
      if: fromJson(inputs.cleanup)
      shell: /bin/bash -euo pipefail {0}

    - name: Set up RubyGems cache
      id: setup-cache
      shell: /bin/bash -euo pipefail {0}
      run: |
        cache_key_prefix="${{ runner.os }}"
        if [[ "${{ runner.os }}" = macOS ]]
        then
          macos_full_version="$(sw_vers -productVersion)"
          macos_version="${macos_full_version%%.*}"
          arch="$(uname -m)"
          cache_key_prefix="${macos_version}-${arch}"
        fi
        echo "cache_key_prefix=${cache_key_prefix}" >> "$GITHUB_ENV"
        echo "macos_version=${macos_version:-}" >> "$GITHUB_OUTPUT"
        echo "arch=${arch:-}" >> "$GITHUB_OUTPUT"

    - name: Cache Homebrew Bundler RubyGems
      id: cache
      uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: ${{ steps.set-up-homebrew.outputs.gems-path }}
        key: ${{ env.cache_key_prefix }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
        restore-keys: ${{ env.cache_key_prefix }}-rubygems-

    - name: Run brew test-bot --only-setup
      run: |
        printf '\n<details><summary>brew test-bot --only-setup</summary>\n<p>\n\n' >> "$GITHUB_STEP_SUMMARY"
        printf '```\n' >> "${GITHUB_STEP_SUMMARY}"
        HOMEBREW_NO_COLOR=1 brew test-bot --only-setup | tee -a "${GITHUB_STEP_SUMMARY}"
        printf '```\n' >> "${GITHUB_STEP_SUMMARY}"
        printf '\n</p>\n</details>\n' >> "$GITHUB_STEP_SUMMARY"
      shell: /bin/bash -euo pipefail {0}

    - name: Set up bottles directory
      id: setup-bottles
      run: |
        rm -rvf "${BOTTLES_DIR:?}"
        mkdir "${BOTTLES_DIR:?}"

        if [[ "$RUNNER_OS" = Linux ]]; then
          bottle_specifier="{ubuntu,linux}"
        else
          bottle_specifier="{macos-${MACOS_VERSION},${MACOS_VERSION}-${ARCH}}"
        fi

        echo "bottle_specifier=$bottle_specifier" >> "$GITHUB_OUTPUT"
      shell: /bin/bash -euo pipefail {0}
      env:
        BOTTLES_DIR: ${{ inputs.bottles-directory }}
        MACOS_VERSION: ${{ steps.setup-cache.outputs.macos_version }}
        ARCH: ${{ steps.setup-cache.outputs.arch }}

    - name: Download bottles from GitHub Actions
      if: fromJson(inputs.download-bottles)
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        pattern: bottles_${{ steps.setup-bottles.outputs.bottle_specifier }}*
        path: ${{ inputs.bottles-directory }}
        merge-multiple: true
